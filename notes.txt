What is Constructor?

Definition:

A constructor is a special type of fuction used to create multiple objects of the same 
type (i.e., similar objects with shared properties and methods).
It's like a blueprint or  template for creating objects. 
instead of manually creating multiple objects , constructor help you automate the process.

2. Why do we use Constructor? 

     constructors help you create many similar objects with the same strcture but different data.  
     Imagine you want create many car objects , each with a different color , model ,and , year. Doing this manually can be repetitive, so using a constructor makes it easier and 
     less error-prone. 

3. How to create a Constructor fuction?     

  A constructor function is written like a regular function but with two key differences:

      It's name starts with an uppercase letter.
      Inside the constructor , this refers to the new object being created.

  Example:

     function Car(color , model , year) {
          this.color = color;
          this.model = model;
          this.year = year;
     }

     In this example , Car is constructor function that takes three parameters: color, model , and year.


4. How to Create objects using a constructor?

    To create an object using a constructor , you use the new keyword.

    Example:

       var car1 = new Car("red", "Toyota",2020);
       var car2 = new Car("blue", "Honda",2018);

      console.log(car1.model); // Toyota 
      console.log(car2.color)// blue
      In this example , car 1 and car2 are two objects created using the car constructor . Both objects
      share the same strcture but have different values.

5. Adding methods to a Constructor

   you can add methods to constructor fuction just like you add properties.

   Example:
     fuction Car(color, model, year){
        this.color = color;
        this.model = model;
        this.year = year;
        this.start = fuction() {
            console.log(this.model + "has started");
        };
     }

     var car1 = new Car("red" , "Toyota" , 2020);
     car1.start(); // Toyota has started
     here , start is a method added Inside the constructor ,which can be called on any object
     created from this constructor.

6.Benefits of Using Constructors      

    Reusability: 
          Constructors allow you to reuse code to create similar objects.
    Efficiency: 
          instead of writing code to create each object manually , you can use a 
    constructor to quickly generate as many object as needed.
    Scalability:
          Constructor are useful in building large-scale applications where many 
    similar objects are needed.

7.Best practices with Constructor

    Always capitalize the first letter of a constructor fuction (e.g, Car )
    to distinguish it from regular fuction. 
    use the new keyword when creating objects from a constructor.

    
    







